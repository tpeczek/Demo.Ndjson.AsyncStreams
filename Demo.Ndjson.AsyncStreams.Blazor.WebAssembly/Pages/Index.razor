@page "/"
@using System.Text.Json
@using global::Ndjson.AsyncStreams.Net.Http
@inject HttpClient Http

<PageTitle>Demo.Ndjson.AsyncStreams.Blazor.WebAssembly</PageTitle>

<button disabled="@IsOperationInProgress" @onclick="FetchWeatherForecastsJson">Fetch Weather Forecast</button>
<button disabled="@IsOperationInProgress" @onclick="StreamWeatherForecastsJson">Stream Weather Forecast (JSON)</button>
<button disabled="@IsOperationInProgress" @onclick="StreamWeatherForecastsNdjson">Stream Weather Forecast (NDJSON)</button>
<button disabled="@IsOperationNotInProgress" @onclick="TriggerCancellation">Abort Operation</button>
<hr />
<table>
    <thead>
        <tr>
            <th>Date</th>
            <th>Temp. (C)</th>
            <th>Temp. (F)</th>
            <th>Summary</th>
        </tr>
    </thead>
    <tbody>
        @foreach (WeatherForecast weatherForecast in weatherForecasts)
        {
            <tr>
                <td>@weatherForecast.DateFormatted</td>
                <td>@weatherForecast.TemperatureC</td>
                <td>@weatherForecast.TemperatureF</td>
                <td>@weatherForecast.Summary</td>
            </tr>
        }
    </tbody>
</table>

@code {
    private bool IsOperationInProgress { get; set; } = false;

    private bool IsOperationNotInProgress => !IsOperationInProgress;

    private CancellationTokenSource? cancellationTokenSource = null;
    private List<WeatherForecast> weatherForecasts = new List<WeatherForecast>();

    private async Task FetchWeatherForecastsJson()
    {
        CancellationToken cancellationToken = GetCancellationToken();

        IsOperationInProgress = true;

        try
        {
            weatherForecasts = await Http.GetFromJsonAsync<List<WeatherForecast>>("api/WeatherForecasts", cancellationToken) ?? new List<WeatherForecast>();
        }
        finally
        {
            IsOperationInProgress = false;
        }
    }

    private async Task StreamWeatherForecastsJson()
    {
        CancellationToken cancellationToken = GetCancellationToken();

        IsOperationInProgress = true;

        try
        {
            weatherForecasts = new List<WeatherForecast>();

            StateHasChanged();

            HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Get, "api/WeatherForecasts/negotiate-stream");
            request.Headers.Add("Accept", "application/json");
            request.SetBrowserResponseStreamingEnabled(true);

            using HttpResponseMessage response = await Http.SendAsync(request, HttpCompletionOption.ResponseHeadersRead, cancellationToken);

            response.EnsureSuccessStatusCode();

            using Stream responseStream = await response.Content.ReadAsStreamAsync(cancellationToken);

            await foreach (WeatherForecast weatherForecast in JsonSerializer.DeserializeAsyncEnumerable<WeatherForecast>(responseStream, new JsonSerializerOptions { PropertyNameCaseInsensitive = true, DefaultBufferSize = 128 }, cancellationToken))
            {
                weatherForecasts.Add(weatherForecast);

                if (cancellationToken.IsCancellationRequested)
                {
                    break;
                }

                StateHasChanged();
            }
        }
        finally
        {
            IsOperationInProgress = false;
        }
    }

    private async Task StreamWeatherForecastsNdjson()
    {
        CancellationToken cancellationToken = GetCancellationToken();

        IsOperationInProgress = true;

        try
        {
            weatherForecasts = new List<WeatherForecast>();

            StateHasChanged();

            HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Get, "api/WeatherForecasts/negotiate-stream");
            request.Headers.Add("Accept", "application/x-ndjson");
            request.SetBrowserResponseStreamingEnabled(true);

            using HttpResponseMessage response = await Http.SendAsync(request, HttpCompletionOption.ResponseHeadersRead, cancellationToken);

            response.EnsureSuccessStatusCode();

            await foreach (WeatherForecast weatherForecast in response.Content.ReadFromNdjsonAsync<WeatherForecast>(cancellationToken: cancellationToken))
            {
                weatherForecasts.Add(weatherForecast);

                if (cancellationToken.IsCancellationRequested)
                {
                    break;
                }

                StateHasChanged();
            }
        }
        finally
        {
            IsOperationInProgress = false;
        }
    }

    private CancellationToken GetCancellationToken()
    {
        cancellationTokenSource = new CancellationTokenSource();
        return cancellationTokenSource.Token;
    }

    private void TriggerCancellation()
    {
        cancellationTokenSource?.Cancel();
        cancellationTokenSource?.Dispose();
        cancellationTokenSource = null;
    }
}